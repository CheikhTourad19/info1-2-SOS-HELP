<!DOCTYPE html>
<html>
<head>
    <!-- Alpine Plugins -->
    <script
            defer
            src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"
    ></script>
    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link
            href="https://fonts.bunny.net/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap"
            rel="stylesheet"
    />
    <!-- Alpine Core -->
    <script
            defer
            src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
    ></script>
    <meta charset="UTF-8">
    <title>{% block title %}Medical Forum{% endblock %}</title>

    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
    {% endblock %}

    {% block javascripts %}
        {{ encore_entry_script_tags('app') }}
    {% endblock %}
</head>
<body>
<!-- Système de notifications flash simplifié -->
<div
        x-data="notificationSystem()"
        x-init="init()"
>
    <!-- Notifications Container -->
    <div
            x-cloak
            x-show="notifications.length > 0"
            role="region"
            aria-label="Notifications"
            class="fixed z-50 flex w-72 gap-2 top-4 end-4 flex-col-reverse"
    >
        <template x-for="notification in notifications" :key="notification.id">
            <div
                    x-show="notification.visible"
                    x-transition:enter="transition ease-out duration-300"
                    x-transition:enter-start="opacity-0 translate-x-12"
                    x-transition:enter-end="opacity-100 translate-x-0"
                    x-transition:leave="transition ease-in duration-200"
                    x-transition:leave-start="opacity-100 translate-x-0"
                    x-transition:leave-end="opacity-0 translate-x-12"
                    class="flex items-center justify-between gap-4 rounded-lg border border-zinc-200/75 bg-white p-4 text-sm shadow-xs dark:border-zinc-700/75 dark:bg-zinc-800"
                    role="alert"
                    :aria-live="notification.type === 'error' ? 'assertive' : 'polite'"
            >
                <div
                        class="flex size-8 flex-none items-center justify-center rounded-full"
                        :class="{
                                'bg-green-100 text-green-700 dark:bg-green-600/25 dark:text-green-100': notification.type === 'success',
                                'bg-rose-100 text-rose-700 dark:bg-rose-600/25 dark:text-rose-100': notification.type === 'error'
                            }"
                >
                    <!-- Success Icon -->
                    <template x-if="notification.type === 'success'">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="hi-micro hi-check inline-block size-4">
                            <path fill-rule="evenodd" d="M12.416 3.376a.75.75 0 0 1 .208 1.04l-5 7.5a.75.75 0 0 1-1.154.114l-3-3a.75.75 0 0 1 1.06-1.06l2.353 2.353 4.493-6.74a.75.75 0 0 1 1.04-.207Z" clip-rule="evenodd" />
                        </svg>
                    </template>
                    <!-- Error Icon -->
                    <template x-if="notification.type === 'error'">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="hi-micro hi-x-mark inline-block size-4">
                            <path d="M5.28 4.22a.75.75 0 0 0-1.06 1.06L6.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L8 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L9.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L8 6.94 5.28 4.22Z" />
                        </svg>
                    </template>
                </div>
                <div class="grow">
                    <div x-text="notification.message"></div>
                </div>
                <button
                        @click="dismissNotification(notification.id)"
                        type="button"
                        class="flex-none text-zinc-500 hover:text-zinc-700 active:text-zinc-500 dark:text-zinc-400 dark:hover:text-zinc-300 dark:active:text-zinc-400"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-x-mark inline-block size-5" aria-hidden="true">
                        <path d="M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z" />
                    </svg>
                    <span class="sr-only">Fermer la notification</span>
                </button>
            </div>
        </template>
    </div>
</div>

<script>
    function notificationSystem() {
        return {
            notifications: [],
            nextId: 1,

            init() {
                {% if app.flashes('success') is not empty %}
                {% for message in app.flashes('success') %}
                this.triggerNotification('{{ message|e('js') }}', 'success');
                {% endfor %}
                {% endif %}

                {% if app.flashes('error') is not empty %}
                {% for message in app.flashes('error') %}
                this.triggerNotification('{{ message|e('js') }}', 'error');
                {% endfor %}
                {% endif %}
            },

            triggerNotification(message, type) {
                const id = this.nextId++;
                this.notifications.push({ id, message, type, visible: false });

                setTimeout(() => {
                    const index = this.notifications.findIndex(n => n.id === id);
                    if (index > -1) {
                        this.notifications[index].visible = true;
                    }
                }, 30);

                setTimeout(() => this.dismissNotification(id), 5000);
            },

            dismissNotification(id) {
                const index = this.notifications.findIndex(n => n.id === id);
                if (index > -1) {
                    this.notifications[index].visible = false;
                    setTimeout(() => {
                        this.notifications.splice(index, 1);
                    }, 300);
                }
            }
        };
    }
</script>

{% block body %}{% endblock %}
</body>
</html>